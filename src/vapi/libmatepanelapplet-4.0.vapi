/* MatePanelApplet-4.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "MatePanel", gir_namespace = "MatePanelApplet", gir_version = "4.0", lower_case_cprefix = "mate_panel_")]
namespace MatePanel {
	[CCode (cheader_filename = "mate-panel-applet.h", type_id = "mate_panel_applet_get_type ()")]
	public class Applet : Gtk.EventBox, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Applet ();
		public static int factory_main (string factory_id, bool out_process, GLib.Type applet_type, MatePanel.AppletFactoryCallback callback);
		public static int factory_setup_in_process (string factory_id, GLib.Type applet_type, MatePanel.AppletFactoryCallback callback);
		public MatePanel.AppletBackgroundType get_background (out Gdk.RGBA color,out Cairo.Pattern pixmap);
		public MatePanel.AppletFlags get_flags ();
		public bool get_locked_down ();
		public MatePanel.AppletOrient get_orient ();
		public string get_preferences_path ();
		public uint get_size ();
		public void request_focus (uint32 timestamp);
		[Version (deprecated = true, deprecated_since = "3.20")]
		public void set_background_widget (Gtk.Widget widget);
		public void set_flags (MatePanel.AppletFlags flags);
		public void set_size_hints (int size_hints, int n_elements, int base_size);
		public void setup_menu (string xml, Gtk.ActionGroup action_group);
		public void setup_menu_from_file (string filename, Gtk.ActionGroup action_group);
		[NoAccessorMethod]
		public string background { owned get; set; }
		[NoAccessorMethod]
		public void* closure { get; construct; }
		[NoAccessorMethod]
		public GLib.DBusConnection connection { owned get; construct; }
		public uint flags { get; set; }
		[NoAccessorMethod]
		public string id { owned get; construct; }
		[NoAccessorMethod]
		public bool locked { get; set; }
		[NoAccessorMethod]
		public bool locked_down { get; set; }
		[NoAccessorMethod]
		public uint orient { get; set; }
		[NoAccessorMethod]
		public string prefs_path { owned get; set; }
		[NoAccessorMethod]
		public uint size { get; set; }
		[NoAccessorMethod]
		public void* size_hints { get; set; }
		public virtual signal void change_background (MatePanel.AppletBackgroundType type, Gdk.RGBA color, Cairo.Pattern pixmap);
		public virtual signal void change_orient (uint orient);
		public virtual signal void change_size (int size);
		public virtual signal void move_focus_out_of_applet (Gtk.DirectionType direction);
	}
	[CCode (cheader_filename = "mate-panel-applet-enums.h", cprefix = "PANEL_", type_id = "mate_panel_applet_background_type_get_type ()")]
	public enum AppletBackgroundType {
		NO_BACKGROUND,
		COLOR_BACKGROUND,
		PIXMAP_BACKGROUND
	}
	[CCode (cheader_filename = "mate-panel-applet-enums.h", cprefix = "MATE_PANEL_APPLET_", type_id = "mate_panel_applet_flags_get_type ()")]
	[Flags]
	public enum AppletFlags {
		FLAGS_NONE,
		EXPAND_MAJOR,
		EXPAND_MINOR,
		HAS_HANDLE
	}
	[CCode (cheader_filename = "mate-panel-applet-enums.h", cprefix = "MATE_PANEL_APPLET_ORIENT_", type_id = "mate_panel_applet_orient_get_type ()")]
	public enum AppletOrient {
		UP,
		DOWN,
		LEFT,
		RIGHT
	}
	[CCode (cheader_filename = "mate-panel-applet.h", instance_pos = 2.9)]
	public delegate bool AppletFactoryCallback (MatePanel.Applet applet, string iid);
	[CCode (cheader_filename = "mate-panel-applet.h", cname = "MATE_PANEL_APPLET_FLAGS_ALL")]
	public const int APPLET_FLAGS_ALL;
	[CCode (cheader_filename = "mate-panel-applet-gsettings.h")]
	namespace AppletSettings
	{
		public GLib.Settings @new(Applet applet, string schema);
	}
}
